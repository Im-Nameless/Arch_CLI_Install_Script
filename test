#!/bin/bash



#    this script is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    this script is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this script.  If not, see <https://www.gnu.org/licenses/>.


#Change the following variables to your liking
BOOTLOADER_ID="Arch"
TARGET_DRIVE="/dev/sda"
ENCRYPT_DRIVE=false
HOSTNAME="hostname"
EXTRAUSER="username"
INTERFACE="XFCE" #options: GNOME, XFCE, KDE
NVME=false
COUNTRY="US"
TIMEZONE="US/Central"
LOCALE="en_US.UTF-8 UTF-8"
KEYMAP="us"
SETTINGS_FILE="install_settings"
source $SETTINGS_FILE
SSD=false


help () {
	echo "help:"
	echo "type \"$0 rankmirrors\" to upgrade your mirror list to get the fastest mirrors"
	echo "type \"$0 install\" to install Arch"
	echo "type \"$0 reee\" to unmount the partitions"
	echo "type \"$0 startover\" to restart the installation"
	echo "type \"$0 wizard\" to get an wizard to configure your installation"
	echo "type \"$0 help\" to get this help"
}

wizard () {
	> $SETTINGS_FILE
	echo -n "Bootloader ID [$BOOTLOADER_ID]: "
	read NEW_BOOTLOADER_ID
	if [ -n "$NEW_BOOTLOADER_ID" ]; then
		echo "BOOTLOADER_ID=\"$NEW_BOOTLOADER_ID\"" >> $SETTINGS_FILE
	fi
	lsblk
	echo -n "Install to [$TARGET_DRIVE]: "
	read NEW_TARGET_DRIVE
	if [ -n "$NEW_TARGET_DRIVE" ]; then
		echo "TARGET_DRIVE=\"$NEW_TARGET_DRIVE\"" >> $SETTINGS_FILE
	fi
	echo "Encrypt drive: [$ENCRYPT_DRIVE]"
	echo -n "Encrypt drive (true/false) [$ENCRYPT_DRIVE]: "
	read NEW_ENCRYPT_DRIVE
	if [ -n "$NEW_ENCRYPT_DRIVE" ]; then
		echo "ENCRYPT_DRIVE=$NEW_ENCRYPT_DRIVE" >> $SETTINGS_FILE
	fi
	echo -n "Hostname [$HOSTNAME]: "
	read NEW_HOSTNAME
	if [ -n "$NEW_HOSTNAME" ]; then
		echo "HOSTNAME=\"$NEW_HOSTNAME\"" >> $SETTINGS_FILE
	fi
	echo "Username: [$EXTRAUSER]"
	echo -n "Name of non root user: "
	read NEW_EXTRAUSER
	if [ -n "$NEW_EXTRAUSER" ]; then
		echo "EXTRAUSER=\"$NEW_EXTRAUSER\"" >> $SETTINGS_FILE
	fi
	echo -n "Desktop environment (GNOME,XFCE,KDE) [$INTERFACE]: "
	read NEW_INTERFACE
	if [ -n "$NEW_INTERFACE" ]; then
		echo "INTERFACE=\"$NEW_INTERFACE\"" >> $SETTINGS_FILE
	fi
	echo -n "NVME Storage (true/false) [$NVME]: "
	read NEW_NVME
	if [ -n "$NEW_NVME" ]; then
		echo "NVME=$NEW_NVME" >> $SETTINGS_FILE
	fi
	echo -n "Country code for Pacman mirrors [$COUNTRY]:"
	read NEW_COUNTRY
	if [ -n "$NEW_COUNTRY" ]; then
		echo "COUNTRY=\"$NEW_COUNTRY\"" >> $SETTINGS_FILE
	fi
	echo -n "Timezone [$TIMEZONE]: "
	read NEW_TIMEZONE
	if [ -n "$NEW_TIMEZONE" ]; then
		echo "TIMEZONE=\"$NEW_TIMEZONE\"" >> $SETTINGS_FILE
	fi
	echo -n "Locale [$LOCALE]: "
	read NEW_LOCALE
	if [ -n "$NEW_LOCALE" ]; then
		echo "LOCALE=\"$NEW_LOCALE\"" >> $SETTINGS_FILE
	fi
	echo -n "Keymap [$KEYMAP]: "
	read NEW_KEYMAP
	if [ -n "$NEW_KEYMAP" ]; then
		echo "KEYMAP=\"$NEW_KEYMAP\"" >> $SETTINGS_FILE
	fi
}

rollback () {
	echo "-==unmounting drives==-"
	if $NVME; then
		umount ${TARGET_DRIVE}p1 /mnt/boot
	else
		umount ${TARGET_DRIVE}1 /mnt/boot
	fi
	if $NVME; then
		umount ${TARGET_DRIVE}p2 /mnt/
	else
		umount ${TARGET_DRIVE}2 /mnt/
	fi
}

ranknewmirrors () {
	echo "-==installing neccesarry packages to rank mirrors==-"
	pacman -Sy
	pacman -S --noconfirm pacman-contrib
	echo "-==backing up old mirrorlist==-"
	cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
	echo "-==creating list of 5 fastest Mirrors for $COUNTRY this might take a bit==-"
	curl -s "https://www.archlinux.org/mirrorlist/?country=$COUNTRY&protocol=https&use_mirror_status=on" | sed -e 's/^#S/S/' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
	echo "-==new mirrorlist created==-"
}


install_arch () {
	echo "-==Starting Arch Installation==-"
	timedatectl set-ntp true
	echo "-==checking is system is capeable of EFI==-"
	if ls /sys/firmware/efi/efivars > /dev/null 2>&1; then
		EFI=true
	else
		EFI=false
	fi

	echo "-==checking if $TARGET_DRIVE is an SSD==-"
	if [ "$(cat /sys/block/$(echo $TARGET_DRIVE | cut -d'/' -f3)/queue/rotational)" = "0" ]; then
		SSD=true
		echo "-==$TARGET_DRIVE is an SSD, trim will be enabled for cryptsetup==-"
	fi
	echo "-==set password for root==-"
	read ROOTPASSWD
	echo "-==set password for $EXTRAUSER==-"
	read USERPASSWD
	echo "-==Formatting drives/partitions==-"
	sgdisk -og ${TARGET_DRIVE}
	if $EFI; then
		sgdisk -n 1:0:+512M -c 1:"EFI" -t 1:ef00 ${TARGET_DRIVE}
	fi
	SYSTEM_PARTITION=$(if $EFI; then echo 2; else echo 1; fi)
	sgdisk -n $SYSTEM_PARTITION:0:0 -c $SYSTEM_PARTITION:"System" -t $SYSTEM_PARTITION:8300 ${TARGET_DRIVE}

	if $NVME; then
		if $EFI; then
			mkfs.fat -F32 ${TARGET_DRIVE}p1
		fi
		if $ENCRYPT_DRIVE; then
			cryptsetup -y -v luksFormat --type luks2 ${TARGET_DRIVE}p$SYSTEM_PARTITION
			cryptsetup open $(if $SSD; then echo "--allow-discards"; fi) ${TARGET_DRIVE}p$SYSTEM_PARTITION cryptroot
			mkfs.btrfs /dev/mapper/cryptroot
		else
			mkfs.btrfs ${TARGET_DRIVE}p$SYSTEM_PARTITION
		fi
	else
		if $EFI; then
			mkfs.fat -F32 ${TARGET_DRIVE}1
		fi
		if $ENCRYPT_DRIVE; then
			cryptsetup -y -v luksFormat --type luks2 ${TARGET_DRIVE}2
			cryptsetup open $(if $SSD; then echo "--allow-discards"; fi) ${TARGET_DRIVE}$SYSTEM_PARTITION cryptroot
			mkfs.btrfs /dev/mapper/cryptroot
		else
			mkfs.btrfs ${TARGET_DRIVE}$SYSTEM_PARTITION
		fi
	fi

	sgdisk -p ${TARGET_DRIVE}


	echo "-==Mouting formatted drives==-"
	if $ENCRYPT_DRIVE; then
		mount /dev/mapper/cryptroot /mnt
	else
		if $NVME; then
				mount ${TARGET_DRIVE}p$SYSTEM_PARTITION /mnt/
		else
			mount ${TARGET_DRIVE}$SYSTEM_PARTITION /mnt/
		fi
	fi
	if $EFI; then
		mkdir /mnt/boot/
		if $NVME; then
			mount ${TARGET_DRIVE}p1 /mnt/boot
		else
			mount ${TARGET_DRIVE}1 /mnt/boot
		fi
	fi

	if $(lspci | grep -i "VGA compatible controller: NVIDIA Corporation" > /dev/null 2>&1); then
		echo "nVIDIA GPU found, nvidia drivers will be installed"
		NVIDIA="nvidia nvidia-utils lib32-nvidia-utils nvidia-settings"
	else
		NVIDIA=""
	fi

	if $(lspci | grep -i "VGA compatible controller: Advanced Micro Devices" > /dev/null 2>&1); then
		echo "AMD GPU found, amdgpu drivers will be installed"
		AMD="xf86-video-amdgpu vulkan-radeon libva-mesa-driver lib32-libva-mesa-driver"
	else
		AMD=""
	fi

	GNOME="baobab eog evince file-roller gdm gedit gnome-backgrounds gnome-calculator gnome-color-manager gnome-control-center gnome-disk-utility gnome-font-viewer gnome-getting-started-docs gnome-keyring gnome-menus gnome-screenshot gnome-session gnome-settings-daemon gnome-shell gnome-shell-extensions gnome-system-monitor gnome-themes-extra gnome-user-docs gnome-user-share grilo-plugins gvfs gvfs-afc gvfs-goa gvfs-google gvfs-gphoto2 gvfs-mtp gvfs-nfs gvfs-smb mousetweaks mutter nautilus orca rygel sushi tracker tracker-miners vino xdg-user-dirs-gtk yelp"
	XFCE="lightdm lightdm-gtk-greeter file-roller thunar thunar-volman xfce4-appfinder xfce4-panel xfce4-session xfce4-settings xfdesktop xfwm4 xfwm4-themes xfce4-pulseaudio-plugin xfce4-whiskermenu-plugin exo garcon gtk-xfce-engine"
	KDE="phonon-qt5-gstreamer appstream-0.12.2-1 appstream-qt-0.12.2-1 archlinux-appstream-data-20180821-1 attica-5.50.0-1 baloo-5.50.0-1 bluedevil-1:5.13.5-1 bluez-qt-5.50.0-1 breeze-5.13.5-1 breeze-gtk-5.13.5-1 breeze-icons-5.50.0-1 convertlit-1.8-8 discover-5.13.5-1 drkonqi-5.13.5-1 ebook-tools-0.2.2-4 editorconfig-core-c-0.12.2-1 frameworkintegration-5.50.0-1 gdb-8.2-2 gdb-common-8.2-2 guile2.0-2.0.14-1 kactivities-5.50.0-1 kactivities-stats-5.50.0-1 kactivitymanagerd-5.13.5-1 karchive-5.50.0-1 kauth-5.50.0-1 kbookmarks-5.50.0-1 kcmutils-5.50.0-1 kcodecs-5.50.0-1 kcompletion-5.50.0-1 kconfig-5.50.0-1 kconfigwidgets-5.50.0-1 kcoreaddons-5.50.0-1 kcrash-5.50.0-1 kdbusaddons-5.50.0-1 kde-cli-tools-5.13.5-1 kdeclarative-5.50.0-1 kdecoration-5.13.5-1 kded-5.50.0-1 kdelibs4support-5.50.0-1 kdeplasma-addons-5.13.5-1 kdesu-5.50.0-1 kemoticons-5.50.0-1 kfilemetadata-5.50.0-1 kgamma5-5.13.5-1 kglobalaccel-5.50.0-1 kguiaddons-5.50.0-1 kholidays-1:5.50.0-1 khotkeys-5.13.5-1 ki18n-5.50.0-1 kiconthemes-5.50.0-1 kidletime-5.50.0-1 kinfocenter-5.13.5-1 kinit-5.50.0-1 kio-5.50.0-1 kirigami2-5.50.0-1 kitemmodels-5.50.0-1 kitemviews-5.50.0-1 kjobwidgets-5.50.0-1 kjs-5.50.0-1 kjsembed-5.50.0-1 kmenuedit-5.13.5-1 knetattach-5.13.5-1 knewstuff-5.50.0-1 knotifications-5.50.0-1 knotifyconfig-5.50.0-1 kpackage-5.50.0-1 kparts-5.50.0-1 kpeople-5.50.0-1 kpty-5.50.0-1 krunner-5.50.0-1 kscreen-5.13.5-1 kscreenlocker-5.13.5-1 kservice-5.50.0-1 ksshaskpass-5.13.5-1 ksysguard-5.13.5-1 ktexteditor-5.50.0-1 ktextwidgets-5.50.0-1 kunitconversion-5.50.0-1 kwallet-5.50.0-1 kwallet-pam-5.13.5-1 kwayland-5.50.0-1 kwayland-integration-5.13.5-1 kwidgetsaddons-5.50.0-1 kwin-5.13.5-2 kwindowsystem-5.50.0-1 kwrited-5.13.5-1 kxmlgui-5.50.0-1 kxmlrpcclient-5.50.0-1 libdbusmenu-qt5-0.9.3+16.04.20160218-1 libdmtx-0.7.4-6 libgit2-1:0.27.4-1 libkscreen-5.13.5-1 libksysguard-5.13.5-1 libmbim-1.16.2-1 libqalculate-2.6.2-1 libqmi-1.20.2-1 libutempter-1.1.6-3 libxres-1.2.0-1 libzip-1.5.1-1 media-player-info-23-1 milou-5.13.5-1 modemmanager-1.8.2-1 modemmanager-qt-5.50.0-1 networkmanager-qt-5.50.0-1 oxygen-5.13.5-1 phonon-qt5-4.10.1-2 phonon-qt5-gstreamer-4.9.0-5 plasma-browser-integration-5.13.5-1 plasma-desktop-5.13.5-1 plasma-framework-5.50.0-1 plasma-integration-5.13.5-1 plasma-nm-5.13.5-1 plasma-pa-5.13.5-1 plasma-sdk-5.13.5-1 plasma-vault-5.13.5-1 plasma-workspace-5.13.5-2 plasma-workspace-wallpapers-5.13.5-1 polkit-kde-agent-5.13.5-1 polkit-qt5-0.112.0+git20180107-2 poppler-qt5-0.67.0-1 powerdevil-5.13.5-1 ppp-2.4.7-4 prison-5.50.0-1 qca-2.1.3-1 qqc2-desktop-style-5.50.0-1 qrencode-4.0.2-1 qt5-declarative-5.11.2-1 qt5-graphicaleffects-5.11.2-1 qt5-location-5.11.2-1 qt5-multimedia-5.11.2-1 qt5-quickcontrols-5.11.2-1 qt5-quickcontrols2-5.11.2-1 qt5-script-5.11.2-1 qt5-sensors-5.11.2-1 qt5-speech-5.11.2-1 qt5-tools-5.11.2-1 qt5-webchannel-5.11.2-1 qt5-webkit-5.212.0alpha2-20 qt5-xmlpatterns-5.11.2-1 sddm-0.18.0-1 sddm-kcm-5.13.5-1 socat-1.7.3.2-2 solid-5.50.0-1 sonnet-5.50.0-1 syntax-highlighting-5.50.0-1 systemsettings-5.13.5-1 threadweaver-5.50.0-1 ttf-hack-3.003-1 user-manager-5.13.5-1 xcb-util-cursor-0.1.3-1 xdg-desktop-portal-kde-5.13.5-1 xorg-xauth-1.0.10-1 xorg-xmessage-1.0.5-1 xorg-xprop-1.2.3-1 xorg-xsetroot-1.1.2-1 plasma-meta-5.13-1"


	if [ "$INTERFACE" == "XFCE" ]; then
		UI=$XFCE
		DISPLAYMANAGER="lightdm"
	elif [ "INTERFACE" == "KDE" ]; then
		UI="$KDE"
		DISPLAYMANAGER="sddm"
	else
		UI=$GNOME
		DISPLAYMANAGER="gdm"
	fi

	PACKAGES="bash bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext glibc grep gzip inetutils iproute2 iputils jfsutils less licenses linux logrotate lvm2 man-db man-pages mdadm nano netctl pacman pciutils perl procps-ng psmisc reiserfsprogs s-nail sed shadow sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux vim which xfsprogs \
	$UI \
	$NVIDIA \
	$AMD \
	mesa lib32-mesa \
	xorg-server \
	powerline-fonts \
	os-prober
	git \
	networkmanager \
	wget \
	curl \
	unzip \
	p7zip \
	pulseaudio \
	pavucontrol \
	terminator \
	htop \
	iftop \
	iotop \
	grub \
	efibootmgr \
	bash \
	zsh \
	firefox \
	vlc \
	sudo \
	ntp \
	hwloc"

	echo "-==Installing base packages==-"
	pacstrap /mnt ${PACKAGES}

	cp $0 /mnt/root/

	if $ENCRYPT_DRIVE; then
		echo "-==configuring mkinitcpio.conf and grub config for encryption==-"
		sed -i "s/^HOOKS=.*/HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt filesystems fsck)/" /mnt/etc/mkinitcpio.conf
		sed -ir "s/^GRUB_CMDLINE_LINUX_DEFAULT=\"([^\s\s]*)\"/GRUB_CMDLINE_LINUX_DEFAULT=\"\1 cryptdevice=UUID=device-UUID:cryptroot$(if $SSD; then echo ":allow-discards"; fi) root=\/dev\/mapper\/cryptroot\"/" /mnt/etc/default/grub
	fi

	echo "-==Generating FS Tab==-"
	genfstab -U /mnt >> /mnt/etc/fstab

	echo "-==Configuring Time Zone==-"
	arch-chroot /mnt ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
	arch-chroot /mnt hwclock --systohc

	echo "-==Configureing Locale==-"
	echo "$LOCALE" >> /mnt/etc/locale.gen
	arch-chroot /mnt locale-gen
	echo "LANG=$(echo $LOCALE | cut -d' ' -f1)" >> /mnt/etc/locale.conf
	echo "KEYMAP=$KEYMAP" >> /mnt/etc/vconsole.conf

	echo "-==Adding Normal User==-"
	arch-chroot /mnt useradd -m -s /usr/bin/bash ${EXTRAUSER}
	echo "-==Set Password for $EXTRAUSER==-"
	arch-chroot /mnt /root/$0 password $USERPASSWD $EXTRAUSER
	echo "${EXTRAUSER} ALL=(ALL) ALL" >> /mnt/etc/sudoers

	#echo "-==Installing Yay==-"
	#arch-chroot /mnt su - ${EXTRAUSER} -c "cd /tmp && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si"
	#echo "-==Installing packages using yay==-"
	#arch-chroot /mnt su - ${EXTRAUSER} -c "yay -s obs-linuxbrowser"

	echo "-==Setting Hostname==-"
	echo "${HOSTNAME}" > /mnt/etc/hostname
	echo "127.0.0.1 localhost ${HOSTNAME}" >> /mnt/etc/hosts

	echo "-==Installing GRUB==-"
	arch-chroot /mnt mkinitcpio -p linux
	arch-chroot /mnt grub-install $(if $EFI; then echo "--target=x86_64-efi --efi-directory=/boot --bootloader-id=${BOOTLOADER_ID}"; else echo "--target=i386-pc"; fi) --recheck $(if !$EFI; echo "$TARGET_DRIVE"; fi)
	echo "-==creating GRUB configuration==-"
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

	arch-chroot /mnt systemctl enable NetworkManager
	arch-chroot /mnt systemctl enable $DISPLAYMANAGER
	arch-chroot /mnt systemctl enable ntpd
	echo "-==Setting password for root user==-"
	arch-chroot /mnt /root/$0 password $ROOTPASSWD root
	echo "YEET, you just installed Arch and it will probably work"

}

password () {
	echo -e "$2\n$2" | passwd "$3"
}

startover () {
	rollback
	install_arch
}

for arg in "$@"
do
    case $arg in
        "rankmirrors" )
        	ranknewmirrors;;
        "install" )
        	install_arch;;
        "install-full" )
			wizard
			ranknewmirrors
			install_arch;;
        "reee" )
			rollback;;
		"startover" )
			startover;;
		"wizard" )
			wizard;;
		"password" )
			password;;
		"help" )
			help;;
   esac
done
